[{"F:\\Web development\\covidTimes\\frontend_react\\src\\index.js":"1","F:\\Web development\\covidTimes\\frontend_react\\src\\reportWebVitals.js":"2","F:\\Web development\\covidTimes\\frontend_react\\src\\pages\\Home\\Home.js":"3","F:\\Web development\\covidTimes\\frontend_react\\src\\pages\\User\\User.js":"4","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\Navbar\\Navbar.js":"5","F:\\Web development\\covidTimes\\frontend_react\\src\\pages\\Home\\Counter\\Counter.js":"6","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\tweets\\Tweets.js":"7","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\LineChart\\LineChart.js":"8","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\TweettCard\\TweetCard.js":"9","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\Form_user\\Form_user.js":"10","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\TweetDetailCard\\TweetDetailCard.js":"11","F:\\Web development\\covidTimes\\frontend_react\\src\\api\\index.js":"12","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\TweetDetailCard\\DetailCard\\DetailCard.js":"13","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\NewLineChart\\NewLineChart.js":"14","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\BarChart\\BarChart.js":"15","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\CounterCard\\CounterCard.js":"16","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\NewTweetCard\\NewTweetCard.js":"17"},{"size":961,"mtime":1632987889724,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1630220217860,"results":"20","hashOfConfig":"19"},{"size":3178,"mtime":1632998841550,"results":"21","hashOfConfig":"19"},{"size":8462,"mtime":1630220217860,"results":"22","hashOfConfig":"19"},{"size":957,"mtime":1632891467487,"results":"23","hashOfConfig":"19"},{"size":477,"mtime":1630220217860,"results":"24","hashOfConfig":"19"},{"size":1118,"mtime":1630220217860,"results":"25","hashOfConfig":"19"},{"size":5006,"mtime":1632984616425,"results":"26","hashOfConfig":"19"},{"size":2087,"mtime":1630220217860,"results":"27","hashOfConfig":"19"},{"size":1104,"mtime":1632891366501,"results":"28","hashOfConfig":"19"},{"size":639,"mtime":1630220217860,"results":"29","hashOfConfig":"19"},{"size":378,"mtime":1630220874591,"results":"30","hashOfConfig":"19"},{"size":312,"mtime":1630220217860,"results":"31","hashOfConfig":"19"},{"size":3830,"mtime":1632993180571,"results":"32","hashOfConfig":"19"},{"size":1457,"mtime":1632992963994,"results":"33","hashOfConfig":"19"},{"size":376,"mtime":1632988581173,"results":"34","hashOfConfig":"19"},{"size":1777,"mtime":1632999929880,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1k4c34q",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\Web development\\covidTimes\\frontend_react\\src\\index.js",["77"],"F:\\Web development\\covidTimes\\frontend_react\\src\\reportWebVitals.js",[],["78","79"],"F:\\Web development\\covidTimes\\frontend_react\\src\\pages\\Home\\Home.js",["80","81","82","83","84","85","86","87","88","89","90"],"F:\\Web development\\covidTimes\\frontend_react\\src\\pages\\User\\User.js",["91","92","93","94"],"import React, { useState, useEffect } from 'react';\r\nimport Form_user from '../../components/Form_user/Form_user';\r\nimport styles from './user.module.css';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { getuserTweets } from '../../api';\r\nimport { Bar, Line } from 'react-chartjs-2';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport TweetCard from './../../components/TweettCard/TweetCard';\r\nimport LineChart from './../../components/LineChart/LineChart';\r\nimport { defaults } from 'react-chartjs-2';\r\n\r\ndefaults.global.animation = true;\r\ndefaults.global.defaultFontColor = 'white';\r\ndefaults.global.defaultFontSize = 12;\r\n\r\nfunction User() {\r\n  const [show, setshow] = useState(false);\r\n  const [sumbitState, setSumbitState] = useState(false);\r\n  const [chartData, setchartdata] = useState({});\r\n  const [tweetlist, settweetlist] = useState([]);\r\n  const [nameSeacrhing, setname] = useState('');\r\n\r\n  const [labels_, setlabels] = useState([]);\r\n  const [polarityvalues, setpolarityvalues] = useState([]);\r\n  const [subjectivityvalue, setsubjectivityvalue] = useState([]);\r\n  const [linechartdata, setlinechartdata] = useState({\r\n    labels: labels_,\r\n    datasets: [\r\n      {\r\n        label: 'Polarity',\r\n        data: polarityvalues,\r\n        fill: false,\r\n        lineTension: 0.5,\r\n        backgroundColor: '#f21170',\r\n        borderColor: '#f21170',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 0,\r\n        pointHitRadius: 10,\r\n        borderWidth: 4,\r\n      },\r\n      {\r\n        label: 'Subjectivity',\r\n        data: subjectivityvalue,\r\n        fill: false,\r\n        lineTension: 0.5,\r\n        backgroundColor: '#511281',\r\n        borderColor: '#511281',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 0,\r\n        pointHitRadius: 10,\r\n        borderWidth: 4,\r\n      },\r\n    ],\r\n  });\r\n\r\n  const sumbitted = async (input) => {\r\n    setshow(false);\r\n    const data = await getuserTweets(input);\r\n    console.log(data);\r\n    const main_data = data.data;\r\n    var positive_tweets = 0;\r\n    var negative_tweets = 0;\r\n    var _labels = [];\r\n    var _polarities = [];\r\n    var _subjectivities = [];\r\n\r\n    for (var i = 0; i < main_data.length; i++) {\r\n      if (main_data[i].Sentiment === 'Positive') {\r\n        positive_tweets++;\r\n      } else {\r\n        negative_tweets++;\r\n      }\r\n      _labels.push(i);\r\n      _polarities.push(main_data[i].Polarity);\r\n      _subjectivities.push(main_data[i].Subjectivity);\r\n    }\r\n\r\n    const data_for_chart = {\r\n      labels: ['Positive', 'Negative'],\r\n      datasets: [\r\n        {\r\n          label: 'No. Of Different Tweets',\r\n          data: [positive_tweets, negative_tweets],\r\n          backgroundColor: ['#f21170', '#511281'],\r\n          borderColor: ['rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)'],\r\n        },\r\n      ],\r\n    };\r\n\r\n    setchartdata(data_for_chart);\r\n    settweetlist(main_data);\r\n    setname(input);\r\n\r\n    const temp = {\r\n      labels: _labels,\r\n      datasets: [\r\n        {\r\n          label: 'Polarity',\r\n          data: _polarities,\r\n          fill: false,\r\n          lineTension: 0.8,\r\n          backgroundColor: '#f21170',\r\n          borderColor: '#f21170',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 0,\r\n          pointHitRadius: 10,\r\n          borderWidth: 4,\r\n        },\r\n        {\r\n          label: 'Subjectivity',\r\n          data: _subjectivities,\r\n          fill: false,\r\n          lineTension: 0.2,\r\n          backgroundColor: '#511281',\r\n          borderColor: '#511281',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 0,\r\n          pointHitRadius: 10,\r\n          borderWidth: 4,\r\n        },\r\n      ],\r\n    };\r\n\r\n    setlabels(_labels);\r\n\r\n    setpolarityvalues(_polarities);\r\n    setsubjectivityvalue(_subjectivities);\r\n\r\n    setlinechartdata(temp);\r\n    console.log(linechartdata);\r\n    setSumbitState(false);\r\n    setshow(true);\r\n  };\r\n  return (\r\n    <div className={styles.user_conatiner}>\r\n      <div className={styles.home_text_content}>\r\n        <p className={styles.sub_text}>\r\n          Welcome{' '}\r\n          <strong>\r\n            COVID-19 Sentimental Analysis Of Twitter Social Handle{' '}\r\n          </strong>\r\n          through this page you can easily perform analysis of particular\r\n          twitter handle by inputing username of user\r\n        </p>\r\n        <Form_user sumbitted={sumbitted} />\r\n      </div>\r\n      <hr className={styles.hr_liner}></hr>\r\n      {show ? (\r\n        <div className={styles.main_content}>\r\n          <div>\r\n            <div className={styles.chart}>\r\n              <Pie\r\n                data={chartData}\r\n                height={300}\r\n                width={400}\r\n                options={{\r\n                  maintainAspectRatio: false,\r\n                  scales: {\r\n                    yAxes: [\r\n                      {\r\n                        ticks: {\r\n                          beginAtZero: true,\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                }}\r\n              />\r\n            </div>\r\n            <div className={styles.chart}>\r\n              <Bar\r\n                data={chartData}\r\n                height={300}\r\n                width={400}\r\n                options={{\r\n                  maintainAspectRatio: false,\r\n                  scales: {\r\n                    yAxes: [\r\n                      {\r\n                        ticks: {\r\n                          beginAtZero: true,\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                }}\r\n              />\r\n            </div>\r\n            <div className={styles.chart}>\r\n              <Line\r\n                data={linechartdata}\r\n                height={300}\r\n                width={400}\r\n                options={{\r\n                  maintainAspectRatio: true,\r\n                }}\r\n                redraw\r\n              />\r\n            </div>\r\n            <div>\r\n              <h2 className={styles.heading}>\r\n                Latest Tweets from {nameSeacrhing}\r\n              </h2>\r\n              {tweetlist.map((tweet) => {\r\n                return (\r\n                  <TweetCard\r\n                    width=\"400px\"\r\n                    key={tweet.tweet_id}\r\n                    tweet_id={tweet.tweet_id}\r\n                    user_id={tweet.user_id}\r\n                    name={tweet.name}\r\n                    date={tweet.created_at.split(' ')[0]}\r\n                    location={tweet.location}\r\n                    text={tweet.text}\r\n                    profile_icon={tweet.profileimage}\r\n                    positive={tweet.Sentiment === 'Positive' ? true : false}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\Navbar\\Navbar.js",["95","96","97","98"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styles from './Navbar.module.css';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport socketIOClient, { io } from 'socket.io-client';\r\n\r\nconst ENDPOINT = 'http://127.0.0.1:5000';\r\n// const ENDPOINT = 'https://twitter-covid-sentiments.herokuapp.com';\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div className={styles.navbar_container}>\r\n      <div className={styles.links_conatiner}>\r\n        <ul className={styles.ul_links}>\r\n          <li className={styles.li_link_title}>covidTimes</li>\r\n          <Link to=\"/\" style={{ textDecoration: 'None' }}>\r\n            <li className={styles.li_link}>Live Twitter Analysis</li>\r\n          </Link>\r\n          <Link to=\"/user_analysis\" style={{ textDecoration: 'None' }}>\r\n            <li className={styles.li_link}>User Analysis</li>\r\n          </Link>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","F:\\Web development\\covidTimes\\frontend_react\\src\\pages\\Home\\Counter\\Counter.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\tweets\\Tweets.js",["99","100"],"import { StylesProvider } from '@material-ui/core';\r\nimport React from 'react';\r\nimport styles from './tweets.module.css';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\n\r\nfunction Tweets(props) {\r\n    let sentiment = <h1></h1>\r\n  if (props.polarity === 0) {\r\n    sentiment = (\r\n      <div className={styles.setiment_neutral}>\r\n        <h3>Neutral</h3>\r\n      </div>\r\n    );\r\n  } else if (props.polarity > 0) {\r\n    sentiment = (\r\n      <div className={styles.setiment_positive}>\r\n        <h3>Positive</h3>\r\n      </div>\r\n    );\r\n  } else if (props.polarity < 0) {\r\n    sentiment = (\r\n      <div className={styles.setiment_negative}>\r\n        <h3>Negative</h3>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={styles.tweets_container}>\r\n      <div className={styles.name_logo}>\r\n        <TwitterIcon className={styles.twitter_icon} />\r\n        <h4 className={styles.name}>\r\n          <strong>{props.name}</strong>\r\n        </h4>\r\n      </div>\r\n\r\n      <div className={styles.tweet_body}>\r\n        <p>{props.text}</p>\r\n      </div>\r\n      {sentiment}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tweets;\r\n","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\LineChart\\LineChart.js",["101","102","103","104","105","106","107","108","109"],"import { SnackbarContent } from '@material-ui/core';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { defaults } from 'react-chartjs-2';\r\nimport socketIOClient from 'socket.io-client';\r\n\r\ndefaults.global.animation = true;\r\ndefaults.global.defaultFontColor = 'black';\r\ndefaults.global.defaultFontSize = 12;\r\n\r\nconst ENDPOINT = 'http://127.0.0.1:5000';\r\n\r\n// const ENDPOINT = 'https://covid19-twitter-analyzer.azurewebsites.net';\r\n\r\nfunction LineChart(props) {\r\n  const [sno, setsno] = useState(1);\r\n  const [labels_, setlabels] = useState([]);\r\n  const [polarityvalues, setpolarityvalues] = useState([]);\r\n  const [subjectivityvalue, setsubjectivityvalue] = useState([]);\r\n  const [data, setdata] = useState({\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        label: 'Polarity',\r\n        data: [],\r\n        fill: false,\r\n        lineTension: 0.5,\r\n        backgroundColor: '#f21170',\r\n        borderColor: '#f21170',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 0,\r\n        pointHitRadius: 10,\r\n        borderWidth: 4,\r\n      },\r\n      {\r\n        label: 'Subjectivity',\r\n        data: [],\r\n        fill: false,\r\n        lineTension: 0.5,\r\n        backgroundColor: '#511281',\r\n        borderColor: '#511281',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 0,\r\n        pointHitRadius: 10,\r\n        borderWidth: 4,\r\n      },\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (props.tweets.length > 0) {\r\n      let oldlabels = labels_;\r\n      let oldpolarityvalues = polarityvalues;\r\n      let oldsubjectivityvalue = subjectivityvalue;\r\n      if (oldlabels.length > 10 && oldlabels.length > 5) {\r\n        oldpolarityvalues.shift();\r\n        oldsubjectivityvalue.shift();\r\n        oldlabels.shift();\r\n      }\r\n      oldlabels.push(props.tweets[0].created_at.split(' ')[1]);\r\n      oldpolarityvalues.push(props.tweets[0].polarity);\r\n      oldsubjectivityvalue.push(props.tweets[0].subjectivity);\r\n\r\n      const temp = {\r\n        labels: oldlabels,\r\n        datasets: [\r\n          {\r\n            label: 'Polarity',\r\n            data: oldpolarityvalues,\r\n            fill: false,\r\n            lineTension: 0.2,\r\n            backgroundColor: '#f21170',\r\n            borderColor: '#f21170',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 0,\r\n            pointHitRadius: 10,\r\n            borderWidth: 4,\r\n          },\r\n          {\r\n            label: 'Subjectivity',\r\n            data: oldsubjectivityvalue,\r\n            fill: false,\r\n            lineTension: 0.2,\r\n            backgroundColor: '#511281',\r\n            borderColor: '#511281',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 0,\r\n            pointHitRadius: 10,\r\n            borderWidth: 4,\r\n          },\r\n        ],\r\n      };\r\n      setdata(temp);\r\n    }\r\n  }, [props]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: 'black',\r\n        borderStyle: 'none',\r\n        borderRadius: '12px',\r\n        width: '100%',\r\n        height: '300px',\r\n        boxShadow:\r\n          'rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset',\r\n      }}\r\n    >\r\n      <Line\r\n        data={data}\r\n        options={{\r\n          maintainAspectRatio: true,\r\n        }}\r\n        redraw\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineChart;\r\n","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\TweettCard\\TweetCard.js",["110","111","112","113"],"import React from 'react';\r\nimport styles from './TweetCard.module.css';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport { ShareButtons, ShareCounts, generateShareIcon } from 'react-share';\r\n\r\nimport {\r\n  LinkedinShareButton,\r\n  TwitterIcon,\r\n  TwitterShareButton,\r\n  WhatsappIcon,\r\n  WhatsappShareButton,\r\n  LinkedinIcon,\r\n} from 'react-share';\r\n\r\nfunction TweetCard(props) {\r\n  const url = `https://twitter.com/${props.user_id}/status/${props.tweet_id}`;\r\n\r\n\r\n  return (\r\n    <div\r\n    style={{width : `${props.width}`}}\r\n      className={\r\n        props.positive ? styles.tweetcard_positive : styles.tweetcard_negative\r\n      }\r\n    >\r\n      <div className={styles.header}>\r\n        <div className={styles.sub_header}>\r\n          {props.profile_icon ? (\r\n            <img src={props.profile_icon} className={styles.icon} />\r\n          ) : (\r\n            <TwitterIcon size={30} round />\r\n          )}\r\n\r\n          <h1 className={styles.name}>{props.name}</h1>\r\n        </div>\r\n        <h4 className={styles.date}>{props.date}</h4>\r\n      </div>\r\n      <p className={styles.text}>{props.text}</p>\r\n      {props.location ? (\r\n        <div className={styles.sub_header_loc}>\r\n          <div>\r\n            <LocationOnIcon fontSize=\"small\" />\r\n          </div>\r\n          <h4 className={styles.location}>{props.location}</h4>\r\n        </div>\r\n      ) : null}\r\n      <div>\r\n        {' '}\r\n        <WhatsappShareButton\r\n          style={{ marginLeft: '0.5rem', marginRight: '0.5rem' }}\r\n          url={url}\r\n        >\r\n          <WhatsappIcon size={35} round />\r\n        </WhatsappShareButton>\r\n        <TwitterShareButton\r\n          style={{ marginLeft: '0.5rem', marginRight: '0.5rem' }}\r\n          url={url}\r\n        >\r\n          <TwitterIcon size={35} round />{' '}\r\n        </TwitterShareButton>\r\n        <LinkedinShareButton\r\n          style={{ marginLeft: '0.5rem', marginRight: '0.5rem' }}\r\n          url={url}\r\n        >\r\n          <LinkedinIcon size={35} round />\r\n        </LinkedinShareButton>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetCard;\r\n","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\Form_user\\Form_user.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\TweetDetailCard\\TweetDetailCard.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\api\\index.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\TweetDetailCard\\DetailCard\\DetailCard.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\NewLineChart\\NewLineChart.js",["114"],"import React, { useState, useEffect } from 'react';\r\nimport styles from './NewLineChart.module.css';\r\nimport Chart from 'react-apexcharts';\r\n\r\nfunction NewLineChart(props) {\r\n  const [labels, setlabels] = useState([]);\r\n  const [polarity, setpolarity] = useState([]);\r\n  const [subjectivity, setsubjectivity] = useState([]);\r\n  const [options, setoptions] = useState({\r\n    chart: {\r\n      type: 'line',\r\n      zoom: {\r\n        enabled: false,\r\n      },\r\n    },\r\n    legend: {\r\n      fontSize: '10px',\r\n      color: 'white',\r\n      labels: {\r\n        colors: 'white',\r\n      },\r\n      markers: {\r\n        width: 12,\r\n        height: 12,\r\n      },\r\n    },\r\n    stroke: {\r\n      curve: 'straight',\r\n      width: 2,\r\n    },\r\n    title: {\r\n      text: 'Polarity vs Sentiment Per Tweet',\r\n      align: 'center',\r\n      style: {\r\n        fontSize: '12px',\r\n        color: 'white',\r\n      },\r\n    },\r\n    grid: {\r\n      show: false,\r\n    },\r\n    xaxis: {\r\n      categories: labels,\r\n      labels: {\r\n        style: {\r\n          colors: 'white',\r\n          fontSize: '12px',\r\n          fontWeight: 200,\r\n        },\r\n      },\r\n    },\r\n    yaxis: {\r\n      labels: {\r\n        style: {\r\n          colors: 'white',\r\n          fontSize: '12px',\r\n          fontWeight: 200,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  const [chartdata, setdata] = useState([\r\n    {\r\n      name: 'Polarity',\r\n      data: polarity,\r\n    },\r\n    {\r\n      name: 'Sentiment',\r\n      data: subjectivity,\r\n    },\r\n  ]);\r\n\r\n  console.log(labels);\r\n\r\n  useEffect(() => {\r\n    if (props.data.length > 0) {\r\n      let oldlabels = labels;\r\n      let oldpolarityvalues = polarity;\r\n      let oldsubjectivityvalue = subjectivity;\r\n      if (oldlabels.length > 5) {\r\n        oldpolarityvalues.shift();\r\n        oldsubjectivityvalue.shift();\r\n        oldlabels.shift();\r\n      }\r\n      oldlabels.push(props.data[0].created_at.split(' ')[1]);\r\n      oldpolarityvalues.push(props.data[0].polarity);\r\n      oldsubjectivityvalue.push(props.data[0].subjectivity);\r\n\r\n      setlabels(oldlabels);\r\n      setpolarity(oldpolarityvalues);\r\n      setsubjectivity(oldsubjectivityvalue);\r\n\r\n      const newOptions = {\r\n        chart: {\r\n          type: 'line',\r\n          zoom: {\r\n            enabled: false,\r\n          },\r\n        },\r\n        legend: {\r\n          fontSize: '10px',\r\n          color: 'white',\r\n          labels: {\r\n            colors: 'white',\r\n          },\r\n          markers: {\r\n            width: 12,\r\n            height: 12,\r\n          },\r\n        },\r\n        stroke: {\r\n          curve: 'straight',\r\n          width: 2,\r\n        },\r\n        title: {\r\n          text: 'Polarity vs Sentiment Per Tweet',\r\n          align: 'center',\r\n          style: {\r\n            fontSize: '12px',\r\n            color: 'white',\r\n          },\r\n        },\r\n        grid: {\r\n          show: false,\r\n        },\r\n        xaxis: {\r\n          categories: labels,\r\n          labels: {\r\n            style: {\r\n              colors: 'white',\r\n              fontSize: '12px',\r\n              fontWeight: 200,\r\n            },\r\n          },\r\n        },\r\n        yaxis: {\r\n          labels: {\r\n            style: {\r\n              colors: 'white',\r\n              fontSize: '12px',\r\n              fontWeight: 200,\r\n            },\r\n          },\r\n        },\r\n      };\r\n\r\n      const newdata = [\r\n        {\r\n          name: 'Polarity',\r\n          data: polarity,\r\n        },\r\n        {\r\n          name: 'Sentiment',\r\n          data: subjectivity,\r\n        },\r\n      ];\r\n\r\n      setoptions(newOptions);\r\n      setdata(newdata);\r\n    }\r\n  }, [props.data]);\r\n\r\n  return (\r\n    <div className={styles.chartstyles}>\r\n      <Chart\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        options={options}\r\n        series={chartdata}\r\n        type=\"line\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewLineChart;\r\n","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\BarChart\\BarChart.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\CounterCard\\CounterCard.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\NewTweetCard\\NewTweetCard.js",["115","116"],{"ruleId":"117","severity":1,"message":"118","line":4,"column":25,"nodeType":"119","messageId":"120","endLine":4,"endColumn":29},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"117","severity":1,"message":"125","line":3,"column":8,"nodeType":"119","messageId":"120","endLine":3,"endColumn":14},{"ruleId":"117","severity":1,"message":"126","line":4,"column":8,"nodeType":"119","messageId":"120","endLine":4,"endColumn":14},{"ruleId":"117","severity":1,"message":"127","line":6,"column":8,"nodeType":"119","messageId":"120","endLine":6,"endColumn":24},{"ruleId":"117","severity":1,"message":"128","line":7,"column":26,"nodeType":"119","messageId":"120","endLine":7,"endColumn":28},{"ruleId":"117","severity":1,"message":"129","line":8,"column":8,"nodeType":"119","messageId":"120","endLine":8,"endColumn":15},{"ruleId":"117","severity":1,"message":"130","line":9,"column":8,"nodeType":"119","messageId":"120","endLine":9,"endColumn":17},{"ruleId":"117","severity":1,"message":"131","line":10,"column":8,"nodeType":"119","messageId":"120","endLine":10,"endColumn":17},{"ruleId":"117","severity":1,"message":"132","line":11,"column":8,"nodeType":"119","messageId":"120","endLine":11,"endColumn":23},{"ruleId":"117","severity":1,"message":"133","line":24,"column":10,"nodeType":"119","messageId":"120","endLine":24,"endColumn":16},{"ruleId":"117","severity":1,"message":"134","line":24,"column":18,"nodeType":"119","messageId":"120","endLine":24,"endColumn":27},{"ruleId":"135","severity":1,"message":"136","line":49,"column":6,"nodeType":"137","endLine":49,"endColumn":8,"suggestions":"138"},{"ruleId":"117","severity":1,"message":"139","line":1,"column":27,"nodeType":"119","messageId":"120","endLine":1,"endColumn":36},{"ruleId":"117","severity":1,"message":"131","line":9,"column":8,"nodeType":"119","messageId":"120","endLine":9,"endColumn":17},{"ruleId":"117","severity":1,"message":"140","line":18,"column":10,"nodeType":"119","messageId":"120","endLine":18,"endColumn":21},{"ruleId":"141","severity":1,"message":"142","line":185,"column":9,"nodeType":"143","endLine":185,"endColumn":44},{"ruleId":"117","severity":1,"message":"144","line":4,"column":8,"nodeType":"119","messageId":"120","endLine":4,"endColumn":19},{"ruleId":"117","severity":1,"message":"145","line":5,"column":8,"nodeType":"119","messageId":"120","endLine":5,"endColumn":22},{"ruleId":"117","severity":1,"message":"128","line":5,"column":26,"nodeType":"119","messageId":"120","endLine":5,"endColumn":28},{"ruleId":"117","severity":1,"message":"146","line":7,"column":7,"nodeType":"119","messageId":"120","endLine":7,"endColumn":15},{"ruleId":"117","severity":1,"message":"147","line":1,"column":10,"nodeType":"119","messageId":"120","endLine":1,"endColumn":24},{"ruleId":"148","severity":1,"message":"149","line":7,"column":21,"nodeType":"143","endLine":7,"endColumn":25},{"ruleId":"117","severity":1,"message":"150","line":1,"column":10,"nodeType":"119","messageId":"120","endLine":1,"endColumn":25},{"ruleId":"117","severity":1,"message":"145","line":5,"column":8,"nodeType":"119","messageId":"120","endLine":5,"endColumn":22},{"ruleId":"117","severity":1,"message":"146","line":11,"column":7,"nodeType":"119","messageId":"120","endLine":11,"endColumn":15},{"ruleId":"117","severity":1,"message":"151","line":16,"column":10,"nodeType":"119","messageId":"120","endLine":16,"endColumn":13},{"ruleId":"117","severity":1,"message":"152","line":16,"column":15,"nodeType":"119","messageId":"120","endLine":16,"endColumn":21},{"ruleId":"117","severity":1,"message":"153","line":17,"column":19,"nodeType":"119","messageId":"120","endLine":17,"endColumn":28},{"ruleId":"117","severity":1,"message":"154","line":18,"column":26,"nodeType":"119","messageId":"120","endLine":18,"endColumn":43},{"ruleId":"117","severity":1,"message":"155","line":19,"column":29,"nodeType":"119","messageId":"120","endLine":19,"endColumn":49},{"ruleId":"135","severity":1,"message":"156","line":135,"column":6,"nodeType":"137","endLine":135,"endColumn":13,"suggestions":"157"},{"ruleId":"117","severity":1,"message":"158","line":4,"column":10,"nodeType":"119","messageId":"120","endLine":4,"endColumn":22},{"ruleId":"117","severity":1,"message":"159","line":4,"column":24,"nodeType":"119","messageId":"120","endLine":4,"endColumn":35},{"ruleId":"117","severity":1,"message":"160","line":4,"column":37,"nodeType":"119","messageId":"120","endLine":4,"endColumn":54},{"ruleId":"161","severity":1,"message":"162","line":29,"column":13,"nodeType":"143","endLine":29,"endColumn":69},{"ruleId":"135","severity":1,"message":"163","line":162,"column":6,"nodeType":"137","endLine":162,"endColumn":18,"suggestions":"164"},{"ruleId":"117","severity":1,"message":"165","line":3,"column":16,"nodeType":"119","messageId":"120","endLine":3,"endColumn":22},{"ruleId":"117","severity":1,"message":"166","line":4,"column":10,"nodeType":"119","messageId":"120","endLine":4,"endColumn":15},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["167"],"no-negated-in-lhs",["168"],"'Navbar' is defined but never used.","'Tweets' is defined but never used.","'CircularProgress' is defined but never used.","'io' is defined but never used.","'Counter' is defined but never used.","'TweetCard' is defined but never used.","'LineChart' is defined but never used.","'TweetDetailCard' is defined but never used.","'loader' is assigned a value but never used.","'setLoader' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getstreamdata'. Either include it or remove the dependency array.","ArrayExpression",["169"],"'useEffect' is defined but never used.","'sumbitState' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component Form_user must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'TwitterIcon' is defined but never used.","'socketIOClient' is defined but never used.","'ENDPOINT' is assigned a value but never used.","'StylesProvider' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'SnackbarContent' is defined but never used.","'sno' is assigned a value but never used.","'setsno' is assigned a value but never used.","'setlabels' is assigned a value but never used.","'setpolarityvalues' is assigned a value but never used.","'setsubjectivityvalue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'labels_', 'polarityvalues', and 'subjectivityvalue'. Either include them or remove the dependency array.",["170"],"'ShareButtons' is defined but never used.","'ShareCounts' is defined but never used.","'generateShareIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'labels', 'polarity', and 'subjectivity'. Either include them or remove the dependency array.",["171"],"'Button' is defined but never used.","'style' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [getstreamdata]",{"range":"178","text":"179"},"Update the dependencies array to be: [labels_, polarityvalues, props, subjectivityvalue]",{"range":"180","text":"181"},"Update the dependencies array to be: [labels, polarity, props.data, subjectivity]",{"range":"182","text":"183"},[1724,1726],"[getstreamdata]",[4449,4456],"[labels_, polarityvalues, props, subjectivityvalue]",[3560,3572],"[labels, polarity, props.data, subjectivity]"]