[{"F:\\Web development\\covidTimes\\frontend_react\\src\\index.js":"1","F:\\Web development\\covidTimes\\frontend_react\\src\\reportWebVitals.js":"2","F:\\Web development\\covidTimes\\frontend_react\\src\\pages\\Home\\Home.js":"3","F:\\Web development\\covidTimes\\frontend_react\\src\\pages\\User\\User.js":"4","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\Navbar\\Navbar.js":"5","F:\\Web development\\covidTimes\\frontend_react\\src\\pages\\Home\\Counter\\Counter.js":"6","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\tweets\\Tweets.js":"7","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\LineChart\\LineChart.js":"8","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\TweettCard\\TweetCard.js":"9","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\Form_user\\Form_user.js":"10","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\TweetDetailCard\\TweetDetailCard.js":"11","F:\\Web development\\covidTimes\\frontend_react\\src\\api\\index.js":"12","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\TweetDetailCard\\DetailCard\\DetailCard.js":"13","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\NewLineChart\\NewLineChart.js":"14","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\BarChart\\BarChart.js":"15","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\CounterCard\\CounterCard.js":"16","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\NewTweetCard\\NewTweetCard.js":"17"},{"size":961,"mtime":1632987889724,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1630220217860,"results":"20","hashOfConfig":"19"},{"size":3281,"mtime":1633026436566,"results":"21","hashOfConfig":"19"},{"size":3304,"mtime":1633025812058,"results":"22","hashOfConfig":"19"},{"size":957,"mtime":1632891467487,"results":"23","hashOfConfig":"19"},{"size":477,"mtime":1630220217860,"results":"24","hashOfConfig":"25"},{"size":1118,"mtime":1630220217860,"results":"26","hashOfConfig":"25"},{"size":5006,"mtime":1632984616425,"results":"27","hashOfConfig":"25"},{"size":2087,"mtime":1630220217860,"results":"28","hashOfConfig":"25"},{"size":1104,"mtime":1632891366501,"results":"29","hashOfConfig":"25"},{"size":639,"mtime":1630220217860,"results":"30","hashOfConfig":"25"},{"size":299,"mtime":1633026365873,"results":"31","hashOfConfig":"19"},{"size":312,"mtime":1630220217860,"results":"32","hashOfConfig":"25"},{"size":3830,"mtime":1632993180571,"results":"33","hashOfConfig":"19"},{"size":1457,"mtime":1632992963994,"results":"34","hashOfConfig":"19"},{"size":376,"mtime":1632988581173,"results":"35","hashOfConfig":"19"},{"size":1780,"mtime":1633025849913,"results":"36","hashOfConfig":"19"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},"1agfbm7",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"1k4c34q",{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"53"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"53"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},"F:\\Web development\\covidTimes\\frontend_react\\src\\index.js",["81"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter, Link, Switch, Route } from 'react-router-dom';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Home from './pages/Home/Home';\r\nimport User from './pages/User/User';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Navbar />\r\n      <Switch>\r\n        <Route path=\"/user_analysis\">\r\n          <User />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["82","83"],"F:\\Web development\\covidTimes\\frontend_react\\src\\reportWebVitals.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\pages\\Home\\Home.js",["84"],"import React, { useState, useEffect } from 'react';\r\nimport { startStream } from '../../api';\r\nimport styles from './home.module.css';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport socketIOClient from 'socket.io-client';\r\nimport moment from 'moment';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport NewLineChart from '../../components/NewLineChart/NewLineChart';\r\nimport BarChart from '../../components/BarChart/BarChart';\r\nimport CounterCard from '../../components/CounterCard/CounterCard';\r\nimport NewTweetCard from '../../components/NewTweetCard/NewTweetCard';\r\n\r\n// const ENDPOINT = 'http://127.0.0.1:5000';\r\nconst ENDPOINT = 'https://covid-19-realtime.azurewebsites.net/';\r\n\r\nfunction Home() {\r\n  const [tweets, settweets] = useState([]);\r\n  const [stats, setstats] = useState([0, 0, 0]);\r\n\r\n  const socket = socketIOClient(ENDPOINT);\r\n\r\n  const startstream = () => {\r\n    startStream()\r\n      .then((res) => {\r\n        console.log(res);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(`500 Internal Error`);\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const getstreamdata = () => {\r\n    socket.on('tweet_stream', (data) => {\r\n      settweets((tweets) => [data, ...tweets]);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    startstream();\r\n    getstreamdata();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let positive = tweets.filter((i) => i.Sentiment === 'Positive').length;\r\n    let negative = tweets.filter((i) => i.Sentiment === 'Negative').length;\r\n    let neutral = tweets.filter((i) => i.Sentiment === 'Neutral').length;\r\n    setstats([positive, negative, neutral]);\r\n  }, [tweets]);\r\n\r\n  return (\r\n    <div className={styles.home_container}>\r\n      <ToastContainer position=\"bottom-center\" />\r\n      <div className={styles.flexitems1}>\r\n        {tweets.length > 0 ? (\r\n          <>\r\n            <div className={styles.chartsdiv}>\r\n              <NewLineChart data={tweets} />\r\n            </div>\r\n            <div className={styles.chartsdiv}>\r\n              <BarChart data={stats} />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <CircularProgress />\r\n        )}\r\n      </div>\r\n      <div className={styles.flexItemCard}>\r\n        {tweets.length > 0 ? (\r\n          <>\r\n            <CounterCard title=\"Total\" count={stats[0] + stats[1] + stats[2]} />\r\n            <CounterCard title=\"Positive\" count={stats[0]} />\r\n            <CounterCard title=\"Negative\" count={stats[1]} />\r\n          </>\r\n        ) : (\r\n          <CircularProgress />\r\n        )}\r\n      </div>\r\n      <div className={styles.flexitems2}>\r\n        {tweets.length > 0 ? (\r\n          <>\r\n            <div className={styles.livetweetboard}>\r\n              {tweets.map((i) => (\r\n                <NewTweetCard\r\n                  key={i.tweet_id}\r\n                  img={i.profileimage}\r\n                  name={i.name}\r\n                  time={moment(i.created_at).fromNow()}\r\n                  text={i.text}\r\n                  sentiment={i.Sentiment}\r\n                  location={i.location}\r\n                />\r\n              ))}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <CircularProgress />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","F:\\Web development\\covidTimes\\frontend_react\\src\\pages\\User\\User.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\Navbar\\Navbar.js",["85","86","87","88"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styles from './Navbar.module.css';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport socketIOClient, { io } from 'socket.io-client';\r\n\r\nconst ENDPOINT = 'http://127.0.0.1:5000';\r\n// const ENDPOINT = 'https://twitter-covid-sentiments.herokuapp.com';\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div className={styles.navbar_container}>\r\n      <div className={styles.links_conatiner}>\r\n        <ul className={styles.ul_links}>\r\n          <li className={styles.li_link_title}>covidTimes</li>\r\n          <Link to=\"/\" style={{ textDecoration: 'None' }}>\r\n            <li className={styles.li_link}>Live Twitter Analysis</li>\r\n          </Link>\r\n          <Link to=\"/user_analysis\" style={{ textDecoration: 'None' }}>\r\n            <li className={styles.li_link}>User Analysis</li>\r\n          </Link>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","F:\\Web development\\covidTimes\\frontend_react\\src\\pages\\Home\\Counter\\Counter.js",[],["89","90"],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\tweets\\Tweets.js",["91","92"],"import { StylesProvider } from '@material-ui/core';\r\nimport React from 'react';\r\nimport styles from './tweets.module.css';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\n\r\nfunction Tweets(props) {\r\n    let sentiment = <h1></h1>\r\n  if (props.polarity === 0) {\r\n    sentiment = (\r\n      <div className={styles.setiment_neutral}>\r\n        <h3>Neutral</h3>\r\n      </div>\r\n    );\r\n  } else if (props.polarity > 0) {\r\n    sentiment = (\r\n      <div className={styles.setiment_positive}>\r\n        <h3>Positive</h3>\r\n      </div>\r\n    );\r\n  } else if (props.polarity < 0) {\r\n    sentiment = (\r\n      <div className={styles.setiment_negative}>\r\n        <h3>Negative</h3>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={styles.tweets_container}>\r\n      <div className={styles.name_logo}>\r\n        <TwitterIcon className={styles.twitter_icon} />\r\n        <h4 className={styles.name}>\r\n          <strong>{props.name}</strong>\r\n        </h4>\r\n      </div>\r\n\r\n      <div className={styles.tweet_body}>\r\n        <p>{props.text}</p>\r\n      </div>\r\n      {sentiment}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tweets;\r\n","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\LineChart\\LineChart.js",["93","94","95","96","97","98","99","100","101"],"import { SnackbarContent } from '@material-ui/core';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { defaults } from 'react-chartjs-2';\r\nimport socketIOClient from 'socket.io-client';\r\n\r\ndefaults.global.animation = true;\r\ndefaults.global.defaultFontColor = 'black';\r\ndefaults.global.defaultFontSize = 12;\r\n\r\nconst ENDPOINT = 'http://127.0.0.1:5000';\r\n\r\n// const ENDPOINT = 'https://covid19-twitter-analyzer.azurewebsites.net';\r\n\r\nfunction LineChart(props) {\r\n  const [sno, setsno] = useState(1);\r\n  const [labels_, setlabels] = useState([]);\r\n  const [polarityvalues, setpolarityvalues] = useState([]);\r\n  const [subjectivityvalue, setsubjectivityvalue] = useState([]);\r\n  const [data, setdata] = useState({\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        label: 'Polarity',\r\n        data: [],\r\n        fill: false,\r\n        lineTension: 0.5,\r\n        backgroundColor: '#f21170',\r\n        borderColor: '#f21170',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 0,\r\n        pointHitRadius: 10,\r\n        borderWidth: 4,\r\n      },\r\n      {\r\n        label: 'Subjectivity',\r\n        data: [],\r\n        fill: false,\r\n        lineTension: 0.5,\r\n        backgroundColor: '#511281',\r\n        borderColor: '#511281',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 0,\r\n        pointHitRadius: 10,\r\n        borderWidth: 4,\r\n      },\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (props.tweets.length > 0) {\r\n      let oldlabels = labels_;\r\n      let oldpolarityvalues = polarityvalues;\r\n      let oldsubjectivityvalue = subjectivityvalue;\r\n      if (oldlabels.length > 10 && oldlabels.length > 5) {\r\n        oldpolarityvalues.shift();\r\n        oldsubjectivityvalue.shift();\r\n        oldlabels.shift();\r\n      }\r\n      oldlabels.push(props.tweets[0].created_at.split(' ')[1]);\r\n      oldpolarityvalues.push(props.tweets[0].polarity);\r\n      oldsubjectivityvalue.push(props.tweets[0].subjectivity);\r\n\r\n      const temp = {\r\n        labels: oldlabels,\r\n        datasets: [\r\n          {\r\n            label: 'Polarity',\r\n            data: oldpolarityvalues,\r\n            fill: false,\r\n            lineTension: 0.2,\r\n            backgroundColor: '#f21170',\r\n            borderColor: '#f21170',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 0,\r\n            pointHitRadius: 10,\r\n            borderWidth: 4,\r\n          },\r\n          {\r\n            label: 'Subjectivity',\r\n            data: oldsubjectivityvalue,\r\n            fill: false,\r\n            lineTension: 0.2,\r\n            backgroundColor: '#511281',\r\n            borderColor: '#511281',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 0,\r\n            pointHitRadius: 10,\r\n            borderWidth: 4,\r\n          },\r\n        ],\r\n      };\r\n      setdata(temp);\r\n    }\r\n  }, [props]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: 'black',\r\n        borderStyle: 'none',\r\n        borderRadius: '12px',\r\n        width: '100%',\r\n        height: '300px',\r\n        boxShadow:\r\n          'rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset',\r\n      }}\r\n    >\r\n      <Line\r\n        data={data}\r\n        options={{\r\n          maintainAspectRatio: true,\r\n        }}\r\n        redraw\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineChart;\r\n","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\TweettCard\\TweetCard.js",["102","103","104","105"],"import React from 'react';\r\nimport styles from './TweetCard.module.css';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport { ShareButtons, ShareCounts, generateShareIcon } from 'react-share';\r\n\r\nimport {\r\n  LinkedinShareButton,\r\n  TwitterIcon,\r\n  TwitterShareButton,\r\n  WhatsappIcon,\r\n  WhatsappShareButton,\r\n  LinkedinIcon,\r\n} from 'react-share';\r\n\r\nfunction TweetCard(props) {\r\n  const url = `https://twitter.com/${props.user_id}/status/${props.tweet_id}`;\r\n\r\n\r\n  return (\r\n    <div\r\n    style={{width : `${props.width}`}}\r\n      className={\r\n        props.positive ? styles.tweetcard_positive : styles.tweetcard_negative\r\n      }\r\n    >\r\n      <div className={styles.header}>\r\n        <div className={styles.sub_header}>\r\n          {props.profile_icon ? (\r\n            <img src={props.profile_icon} className={styles.icon} />\r\n          ) : (\r\n            <TwitterIcon size={30} round />\r\n          )}\r\n\r\n          <h1 className={styles.name}>{props.name}</h1>\r\n        </div>\r\n        <h4 className={styles.date}>{props.date}</h4>\r\n      </div>\r\n      <p className={styles.text}>{props.text}</p>\r\n      {props.location ? (\r\n        <div className={styles.sub_header_loc}>\r\n          <div>\r\n            <LocationOnIcon fontSize=\"small\" />\r\n          </div>\r\n          <h4 className={styles.location}>{props.location}</h4>\r\n        </div>\r\n      ) : null}\r\n      <div>\r\n        {' '}\r\n        <WhatsappShareButton\r\n          style={{ marginLeft: '0.5rem', marginRight: '0.5rem' }}\r\n          url={url}\r\n        >\r\n          <WhatsappIcon size={35} round />\r\n        </WhatsappShareButton>\r\n        <TwitterShareButton\r\n          style={{ marginLeft: '0.5rem', marginRight: '0.5rem' }}\r\n          url={url}\r\n        >\r\n          <TwitterIcon size={35} round />{' '}\r\n        </TwitterShareButton>\r\n        <LinkedinShareButton\r\n          style={{ marginLeft: '0.5rem', marginRight: '0.5rem' }}\r\n          url={url}\r\n        >\r\n          <LinkedinIcon size={35} round />\r\n        </LinkedinShareButton>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetCard;\r\n","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\Form_user\\Form_user.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\TweetDetailCard\\TweetDetailCard.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\api\\index.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\TweetDetailCard\\DetailCard\\DetailCard.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\NewLineChart\\NewLineChart.js",["106"],"import React, { useState, useEffect } from 'react';\r\nimport styles from './NewLineChart.module.css';\r\nimport Chart from 'react-apexcharts';\r\n\r\nfunction NewLineChart(props) {\r\n  const [labels, setlabels] = useState([]);\r\n  const [polarity, setpolarity] = useState([]);\r\n  const [subjectivity, setsubjectivity] = useState([]);\r\n  const [options, setoptions] = useState({\r\n    chart: {\r\n      type: 'line',\r\n      zoom: {\r\n        enabled: false,\r\n      },\r\n    },\r\n    legend: {\r\n      fontSize: '10px',\r\n      color: 'white',\r\n      labels: {\r\n        colors: 'white',\r\n      },\r\n      markers: {\r\n        width: 12,\r\n        height: 12,\r\n      },\r\n    },\r\n    stroke: {\r\n      curve: 'straight',\r\n      width: 2,\r\n    },\r\n    title: {\r\n      text: 'Polarity vs Sentiment Per Tweet',\r\n      align: 'center',\r\n      style: {\r\n        fontSize: '12px',\r\n        color: 'white',\r\n      },\r\n    },\r\n    grid: {\r\n      show: false,\r\n    },\r\n    xaxis: {\r\n      categories: labels,\r\n      labels: {\r\n        style: {\r\n          colors: 'white',\r\n          fontSize: '12px',\r\n          fontWeight: 200,\r\n        },\r\n      },\r\n    },\r\n    yaxis: {\r\n      labels: {\r\n        style: {\r\n          colors: 'white',\r\n          fontSize: '12px',\r\n          fontWeight: 200,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  const [chartdata, setdata] = useState([\r\n    {\r\n      name: 'Polarity',\r\n      data: polarity,\r\n    },\r\n    {\r\n      name: 'Sentiment',\r\n      data: subjectivity,\r\n    },\r\n  ]);\r\n\r\n  console.log(labels);\r\n\r\n  useEffect(() => {\r\n    if (props.data.length > 0) {\r\n      let oldlabels = labels;\r\n      let oldpolarityvalues = polarity;\r\n      let oldsubjectivityvalue = subjectivity;\r\n      if (oldlabels.length > 5) {\r\n        oldpolarityvalues.shift();\r\n        oldsubjectivityvalue.shift();\r\n        oldlabels.shift();\r\n      }\r\n      oldlabels.push(props.data[0].created_at.split(' ')[1]);\r\n      oldpolarityvalues.push(props.data[0].polarity);\r\n      oldsubjectivityvalue.push(props.data[0].subjectivity);\r\n\r\n      setlabels(oldlabels);\r\n      setpolarity(oldpolarityvalues);\r\n      setsubjectivity(oldsubjectivityvalue);\r\n\r\n      const newOptions = {\r\n        chart: {\r\n          type: 'line',\r\n          zoom: {\r\n            enabled: false,\r\n          },\r\n        },\r\n        legend: {\r\n          fontSize: '10px',\r\n          color: 'white',\r\n          labels: {\r\n            colors: 'white',\r\n          },\r\n          markers: {\r\n            width: 12,\r\n            height: 12,\r\n          },\r\n        },\r\n        stroke: {\r\n          curve: 'straight',\r\n          width: 2,\r\n        },\r\n        title: {\r\n          text: 'Polarity vs Sentiment Per Tweet',\r\n          align: 'center',\r\n          style: {\r\n            fontSize: '12px',\r\n            color: 'white',\r\n          },\r\n        },\r\n        grid: {\r\n          show: false,\r\n        },\r\n        xaxis: {\r\n          categories: labels,\r\n          labels: {\r\n            style: {\r\n              colors: 'white',\r\n              fontSize: '12px',\r\n              fontWeight: 200,\r\n            },\r\n          },\r\n        },\r\n        yaxis: {\r\n          labels: {\r\n            style: {\r\n              colors: 'white',\r\n              fontSize: '12px',\r\n              fontWeight: 200,\r\n            },\r\n          },\r\n        },\r\n      };\r\n\r\n      const newdata = [\r\n        {\r\n          name: 'Polarity',\r\n          data: polarity,\r\n        },\r\n        {\r\n          name: 'Sentiment',\r\n          data: subjectivity,\r\n        },\r\n      ];\r\n\r\n      setoptions(newOptions);\r\n      setdata(newdata);\r\n    }\r\n  }, [props.data]);\r\n\r\n  return (\r\n    <div className={styles.chartstyles}>\r\n      <Chart\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        options={options}\r\n        series={chartdata}\r\n        type=\"line\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewLineChart;\r\n","F:\\Web development\\covidTimes\\frontend_react\\src\\components\\BarChart\\BarChart.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\CounterCard\\CounterCard.js",[],"F:\\Web development\\covidTimes\\frontend_react\\src\\components\\NewTweetCard\\NewTweetCard.js",["107","108"],"import React from 'react';\r\nimport styles from './NewtweetCard.module.css';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport { style } from 'dom-helpers';\r\nimport LocationOn from '@material-ui/icons/LocationOn';\r\n\r\nfunction NewTweetCard(props) {\r\n  const checkSentiment = (sentiment) => {\r\n    if (sentiment === 'Positive') {\r\n      return '#B1E693';\r\n    } else if (sentiment === 'Negative') {\r\n      return '#FE8F8F';\r\n    } else {\r\n      return '#3F5468';\r\n    }\r\n  };\r\n  return (\r\n    <Card className={props.user ? styles.extra : styles.tweetcardcont}>\r\n      <div className={styles.flexBox}>\r\n        <div className={styles.flexbox1}>\r\n          <img src={props.img} className={styles.img} alt=\"user-logo\" />\r\n          <h5 className={styles.name}>{props.name}</h5>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <p className={styles.time}>\r\n            <em>{props.time}</em>\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className={styles.textdiv}>\r\n        <p className={styles.text}>{props.text}</p>\r\n      </div>\r\n      <div className={styles.bottomflex}>\r\n        <div\r\n          style={{ backgroundColor: checkSentiment(props.sentiment) }}\r\n          className={styles.sent_div}\r\n        >\r\n          <h6 className={styles.sentimenttext}>{props.sentiment}</h6>\r\n        </div>\r\n        {props.location !== null ? (\r\n          <div className={styles.loc_div}>\r\n            <p style={{ fontSize: '12px', margin: '0px' }}>\r\n              {props.location}\r\n              <LocationOn />\r\n            </p>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default NewTweetCard;\r\n",{"ruleId":"109","severity":1,"message":"110","line":4,"column":25,"nodeType":"111","messageId":"112","endLine":4,"endColumn":29},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":43,"column":6,"nodeType":"119","endLine":43,"endColumn":8,"suggestions":"120"},{"ruleId":"109","severity":1,"message":"121","line":4,"column":8,"nodeType":"111","messageId":"112","endLine":4,"endColumn":19},{"ruleId":"109","severity":1,"message":"122","line":5,"column":8,"nodeType":"111","messageId":"112","endLine":5,"endColumn":22},{"ruleId":"109","severity":1,"message":"123","line":5,"column":26,"nodeType":"111","messageId":"112","endLine":5,"endColumn":28},{"ruleId":"109","severity":1,"message":"124","line":7,"column":7,"nodeType":"111","messageId":"112","endLine":7,"endColumn":15},{"ruleId":"113","replacedBy":"125"},{"ruleId":"115","replacedBy":"126"},{"ruleId":"109","severity":1,"message":"127","line":1,"column":10,"nodeType":"111","messageId":"112","endLine":1,"endColumn":24},{"ruleId":"128","severity":1,"message":"129","line":7,"column":21,"nodeType":"130","endLine":7,"endColumn":25},{"ruleId":"109","severity":1,"message":"131","line":1,"column":10,"nodeType":"111","messageId":"112","endLine":1,"endColumn":25},{"ruleId":"109","severity":1,"message":"122","line":5,"column":8,"nodeType":"111","messageId":"112","endLine":5,"endColumn":22},{"ruleId":"109","severity":1,"message":"124","line":11,"column":7,"nodeType":"111","messageId":"112","endLine":11,"endColumn":15},{"ruleId":"109","severity":1,"message":"132","line":16,"column":10,"nodeType":"111","messageId":"112","endLine":16,"endColumn":13},{"ruleId":"109","severity":1,"message":"133","line":16,"column":15,"nodeType":"111","messageId":"112","endLine":16,"endColumn":21},{"ruleId":"109","severity":1,"message":"134","line":17,"column":19,"nodeType":"111","messageId":"112","endLine":17,"endColumn":28},{"ruleId":"109","severity":1,"message":"135","line":18,"column":26,"nodeType":"111","messageId":"112","endLine":18,"endColumn":43},{"ruleId":"109","severity":1,"message":"136","line":19,"column":29,"nodeType":"111","messageId":"112","endLine":19,"endColumn":49},{"ruleId":"117","severity":1,"message":"137","line":135,"column":6,"nodeType":"119","endLine":135,"endColumn":13,"suggestions":"138"},{"ruleId":"109","severity":1,"message":"139","line":4,"column":10,"nodeType":"111","messageId":"112","endLine":4,"endColumn":22},{"ruleId":"109","severity":1,"message":"140","line":4,"column":24,"nodeType":"111","messageId":"112","endLine":4,"endColumn":35},{"ruleId":"109","severity":1,"message":"141","line":4,"column":37,"nodeType":"111","messageId":"112","endLine":4,"endColumn":54},{"ruleId":"142","severity":1,"message":"143","line":29,"column":13,"nodeType":"130","endLine":29,"endColumn":69},{"ruleId":"117","severity":1,"message":"144","line":162,"column":6,"nodeType":"119","endLine":162,"endColumn":18,"suggestions":"145"},{"ruleId":"109","severity":1,"message":"146","line":3,"column":16,"nodeType":"111","messageId":"112","endLine":3,"endColumn":22},{"ruleId":"109","severity":1,"message":"147","line":4,"column":10,"nodeType":"111","messageId":"112","endLine":4,"endColumn":15},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["148"],"no-negated-in-lhs",["149"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getstreamdata'. Either include it or remove the dependency array.","ArrayExpression",["150"],"'TwitterIcon' is defined but never used.","'socketIOClient' is defined but never used.","'io' is defined but never used.","'ENDPOINT' is assigned a value but never used.",["148"],["149"],"'StylesProvider' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'SnackbarContent' is defined but never used.","'sno' is assigned a value but never used.","'setsno' is assigned a value but never used.","'setlabels' is assigned a value but never used.","'setpolarityvalues' is assigned a value but never used.","'setsubjectivityvalue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'labels_', 'polarityvalues', and 'subjectivityvalue'. Either include them or remove the dependency array.",["151"],"'ShareButtons' is defined but never used.","'ShareCounts' is defined but never used.","'generateShareIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'labels', 'polarity', and 'subjectivity'. Either include them or remove the dependency array.",["152"],"'Button' is defined but never used.","'style' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},"Update the dependencies array to be: [getstreamdata]",{"range":"159","text":"160"},"Update the dependencies array to be: [labels_, polarityvalues, props, subjectivityvalue]",{"range":"161","text":"162"},"Update the dependencies array to be: [labels, polarity, props.data, subjectivity]",{"range":"163","text":"164"},[1379,1381],"[getstreamdata]",[4449,4456],"[labels_, polarityvalues, props, subjectivityvalue]",[3560,3572],"[labels, polarity, props.data, subjectivity]"]